
from dsp.abstractstream import Streamer
import numpy as np

class RMSStream(Streamer):
    
    def __init__(self, frame_stream):
        "RMSSTream - Initialize a root mean square stream from a stream of frames"
        self.frame_stream = frame_stream
        self.frame_it = iter(frame_stream)
        
    def __iter__(self):
        return self
    
    def __next__(self):
        "next - next RMS value"
        framedata, t, timestamp = next(self.frame_it)
        # Root Mean Square:  sqrt(mean(squared data))
        # proportional to square root of mean intensity
        
        # We omit the square root as we convert to dB: 20log10(sqrt(...)) == 10log10(...)
        framesq = np.square(framedata)
        meansq = np.mean(framesq)
        # Convert squared mean
        rms = 10*np.log10(meansq)

        return rms, t, timestamp

    def shape(self):
        "shape() - shape of tensor generated by iterator"
        return np.asarray([1])  # scalar
    
    def size(self):
        "size() - number of elements in tensor generated by iterator"
        return np.asarray(np.product(self.shape()))
    
    def __len__(self):
        return len(self.frame_stream)
